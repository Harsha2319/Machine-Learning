import numpy as np
import pandas as pd
import random

def accuracy(true, pred):
    acc = 0
    for i, j in zip(true, pred):
        if i == j:
            acc += 1
    return float(acc/len(true))

# adding intercept (w0) to X - to compute function w0 + x1w1 + x2w2 + .... 
def addIntercept(X):
    intercept = np.ones((X.shape[0], 1))
    return np.concatenate((intercept, X), axis=1)

def sigmoid(z):
    return 1 / (1 + np.exp(-z))

# returns sigmoid of the function (w0 + x1w1 + x2w2 + .... ) generated by dot product of X and theta.
def predictProb(X, theta):
    X = addIntercept(X)
    return sigmoid(np.dot(X, theta))

# Converts prediction of sigmoid function into categorical variable like 0 and 1.
def predict(X, theta, threshold=0.5):
    return predictProb(X, theta) >= threshold

# implements gradient ascent with L2 Regularization.
def fit(X, y, n_iter, lr, lamb):
    print("Number of iterations : ",n_iter)
    print("Learning Rate : ",lr)
    print("Lambda : ",lamb)
    X = addIntercept(X)
    theta = []
    for i in range(X.shape[1]):
        theta.append(random.randint(1,30))
    for i in range(n_iter):
        z = np.dot(X, theta)
        h = sigmoid(z)
        gradient = np.dot(X.T, (h - y)) / y.size
        lam = []
        for j in theta:
            lam.append(lr*lamb*j)
        theta = theta + lr * gradient - lam
        if (i % 1000 == 0):
            print(i)
    return theta

def logisticRegression(lr, n_iter, train, test, lamb):
    theta = fit(train.drop(columns=['class']), train['class'], n_iter, lr, lamb)
    tr_pred = predict(train.drop(columns=['class']), theta, 0.5)
    ts_pred = predict(test.drop(columns=['class']), theta, 0.5)
    tr_acc = accuracy(train['class'], tr_pred)
    ts_acc = accuracy(test['class'], ts_pred)
    print('Training Accuracy: ', tr_acc*100)
    print('Testing Accuracy: ', ts_acc*100)
    return 0

def main():
    print("Logistic regression")
    train_df = pd.read_csv('train.csv')
    test_df = pd.read_csv('test.csv')
    for i in [0.5, 0.2, 0.1, 0.01, 0.001]:
        logisticRegression(0.1, 5000, train_df, test_df, i)
    
    print("Logistic regression - No Stop Words")
    new_train = pd.read_csv('new_train.csv')
    new_test = pd.read_csv('new_test.csv')
    for i in [0.5, 0.2, 0.1, 0.01, 0.001]:
        logisticRegression(0.1, 5000, new_train, new_test, i)   
    
main()

